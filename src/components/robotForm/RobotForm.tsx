import { useFormik } from 'formik';
import styles from './robotForm.module.css';
import * as Yup from 'yup'



interface IFormValues {
  model: string;
  creator: string;
  email: string;
}


export default function RobotForm() {

  const schema = Yup.object().shape({
    model: Yup
    .number()
    .typeError('–≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ä–æ–±–æ—Ç–∞ ‚õ∑Ô∏è')
    .required('–Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –º–æ–¥–µ–ª—å')
    .min(100, '—Ç–≤–æ—è –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 100!')
    .max(1000, '—Ç—ã –Ω–µ —Ç–∞–∫–æ–π —Ä–æ–±–æ—Ç! –º–æ–¥–µ–ª—å –¥–æ 1000...'),
    creator: Yup
    .string()
    .required('—Å–∫–∞–∂–∏, –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å'),
    email: Yup
    .string()
    .email('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
    .required('email –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!')
  })
  
  const formik = useFormik({

    initialValues: {
      model: '',
      creator: '',
      email: ''
    } as IFormValues,
    validationSchema: schema,
    validateOnChange: false,

    onSubmit: (values: IFormValues, { resetForm }) => {
      console.log(values);
      resetForm();
    }
  });

 
  return (
<>
    <form onSubmit={formik.handleSubmit} className={styles.loginForm}>
      <label>–≠—Ç–æ —Ñ–æ—Ä–º–∞ –¥–ª—è ü§ñ</label>
      <input value={formik.values.model} name='model' onChange={formik.handleChange} type="text" placeholder='–≤–∞—à–∞ –º–æ–¥–µ–ª—å' />
      <input value={formik.values.creator} name='creator' onChange={formik.handleChange} type="text" placeholder='–∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è' />
      <input value={formik.values.email} name='email' onChange={formik.handleChange} type="text" placeholder='email –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è' />
      <button type='submit'>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
    <span className={styles.errors}>{formik.errors.model}</span>
    <span className={styles.errors}>{formik.errors.creator}</span>
    <span className={styles.errors}>{formik.errors.email}</span>
</>
  );
}